// Test definitions. Do NOT edit this file!

#define CATCH_CONFIG_MAIN // defines main() automatically
#include <catch2/catch.hpp>

#include "../fraccion.hpp" // fraccion implementations
#include "../matfrac.hpp"

// ============================
// tests for exercise add & mul
// ----------------------------

TEST_CASE("ex0", "[Fracciones bien formadas]")
{   
    fraccion e;
    fraccion f{5,7};
    fraccion g{2,4};
    fraccion h{-3,-8};
    fraccion i{4,-9};

    SECTION( "validando y convirtiendo fracciones" ) {
        REQUIRE( e.getN() == 0 );
        REQUIRE( e.getD() == 1 );
        REQUIRE( f.getN() == 5 );
        REQUIRE( f.getD() == 7 );
        REQUIRE( g.getN() == 1 );
        REQUIRE( g.getD() == 2 );
        REQUIRE( h.getN() == 3 );
        REQUIRE( h.getD() == 8 );
    }
}

TEST_CASE("ex1", "[Sumando fracciones]")
{   
    fraccion f{5,7};
    fraccion g{3,8};

    SECTION( "sumando 5/7 y 3/8" ) {
        fraccion s;

        s=f.suma(g);

        REQUIRE( s.getN() == 61 );
        REQUIRE( s.getD() == 56 );
    }
}

TEST_CASE("ex2", "[Multiplicando fracciones]")
{   
    fraccion f{2,3};
    fraccion g{1,5};

    SECTION( "multiplicando 2/3 y 1/5" ) {
        fraccion m;

        m=f.multiplica(g);

        REQUIRE( m.getN() == 2 );
        REQUIRE( m.getD() == 15 );
    }
}

TEST_CASE("ex3", "[Sumando matrices]")
{   
    matfrac m1("m1.f"), m2("m2.f"), m3("m3.f"), m4{2,2};
    m1.imprime();
    m2.imprime();
    m3.imprime();
    m4.imprime();

    SECTION( "Sumando m1 y m2" ) {
        REQUIRE( m1.suma(m2).igualA(m3) );
    }

    SECTION( "Comparando dimensiones en matrices") {
        REQUIRE(m1.igualDimensionA(m2));
        REQUIRE(!m2.igualDimensionA(m4));
    }
}